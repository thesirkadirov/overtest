@using Microsoft.EntityFrameworkCore
@using Sirkadirov.Overtest.Libraries.Shared.Database.Operators
@using Sirkadirov.Overtest.WebApplication.ViewComponents.Shared
@model Sirkadirov.Overtest.WebApplication.Models.Shared.Pagination.PaginatedListModel<Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.ProgrammingTask>
@{
    ViewBag.PageTitle = Localizer["Архів завдань"].Value;

    var currentUserId = new Guid(UserManager.GetUserId(Context.User));
    
    var taskCategoriesList = await DatabaseContext.ProgrammingTaskCategories
        .OrderBy(c => c.DisplayName)
        .Select(c => new KeyValuePair<Guid, string>(c.Id, c.DisplayName))
        .ToListAsync();
}

@section FullwidthSection
{
    
    @{
        Func<dynamic, object> DrawDropleftMenu() => 
            @<span>
                
                <partial name="ViewComponents/Shared/DropleftMenu/CommonSupportDropleftMenuItems" />
                
                @if (await DatabaseContext.UserPermissionsOperator.VerifyUserTypeSetAsync(currentUserId, OvertestUserPermissionsOperator.UserTypeSet.Administrator))
                {
                    <div class="dropdown-divider"></div>
                    
                    <a class="dropdown-item" asp-area="Administration" asp-controller="ProgrammingTasksAdministration" asp-action="Create">
                        <i class="fas fa-file-alt"></i> @Localizer["Створити завдання"]
                    </a>
                }
                
            </span>;
    }
    
    @(await Component.InvokeAsync<ServiceHeaderViewComponent>(new ServiceHeaderViewComponent.HeaderModel
    {
        PageTitle = Localizer["Архів завдань"].Value,
        MenuDrawer = new ServiceHeaderViewComponent.HeaderModel.MenuDrawerData
        {
            Enabled = true,
            DrawMenuItems = DrawDropleftMenu()
        }
    }))
    
}

<form class="mb-5 p-0 no-selection-allowed" asp-area="TasksArchive" asp-controller="ProgrammingTasksArchive" asp-action="List" method="get">
    <div class="input-group shadow-sm">
        
        @if (!string.IsNullOrWhiteSpace(ViewData["SearchQuery"] as string) || ViewData["SelectedCategoryId"] is Guid)
        {
            <div class="input-group-prepend">
                <a class="btn btn-dark" asp-area="TasksArchive" asp-controller="ProgrammingTasksArchive" asp-action="List"><i class="fas fa-times-circle"></i></a>
            </div>
        }
        
        <input name="searchQuery" type="text" class="form-control" placeholder="@Localizer["Вкажіть ваш пошуковий запит"]" value="@(ViewData["SearchQuery"] as string)">
        
        <div class="input-group-append w-25">
            <select name="category" class="form-control">
                
                @{
                    string InsertSelectedAttributeIfNeeded(Guid? currentCategoryId)
                    {
                        return ViewData["SelectedCategoryId"] as Guid? == currentCategoryId ? "selected" : "";
                    }
                }
                
                <!option value="" @InsertSelectedAttributeIfNeeded(null)>@Localizer["Усі категорії"]</!option>
                
                @if (taskCategoriesList.Count > 0)
                {
                    foreach (var (categoryId, categoryDisplayName) in taskCategoriesList)
                    {
                        <!option value="@categoryId.ToString()" @InsertSelectedAttributeIfNeeded(categoryId)>@categoryDisplayName</!option>
                    }
                }
                else
                {
                    <option>@Localizer["Категорії завдань відсутні :("]</option>
                }
            </select>
        </div>
        
        <div class="input-group-append">
            <button class="btn btn-dark"><i class="fas fa-search"></i></button>
        </div>
        
    </div>
</form>

@if (ViewData["SelectedCategoryId"] is Guid)
{
    
    var categoryId = ViewData["SelectedCategoryId"] as Guid?;
    var categoryTitle = taskCategoriesList.First(c => c.Key == categoryId).Value;
    var categoryDescription = await DatabaseContext.ProgrammingTaskCategories
        .Where(c => c.Id == categoryId)
        .Select(c => c.Description)
        .AsNoTracking()
        .FirstAsync();
    
    if (!string.IsNullOrWhiteSpace(categoryDescription))
    {
        <div class="card rounded-lg shadow-sm mt-0 mb-5 no-selection-allowed">
            <div class="card-body">
                <h5 class="card-title">@categoryTitle</h5>
                @categoryDescription
            </div>
        </div>
    }
    
}

@if (Model.ItemsList.Count > 0)
{
    
    @*
        TODO: Реалізувати обчислення статистики вирішуваності завдань
    *@
    
    <div class="row no-selection-allowed">
        <style>
            .programming-task-list-item:hover h5 {
                color: var(--orange) !important;
            }
        </style>
        @foreach (var programmingTask in Model.ItemsList)
        {
            <div class="col-md-6 p-2">
                <div class="card h-100 rounded-lg shadow-sm">
                    <div class="card-body programming-task-list-item d-flex justify-content-between">
                        <div class="align-self-center">
                            <h5 class="m-0 text-dark text-decoration-none">@programmingTask.Title</h5>
                            <span class="d-block text-muted">@taskCategoriesList.FirstOrDefault(c => c.Key == programmingTask.CategoryId).Value</span>
                            <a class="stretched-link" asp-area="TasksArchive" asp-controller="ProgrammingTasksBrowsing" asp-action="View" asp-route-programmingTaskId="@programmingTask.Id"></a>
                        </div>
                        <div class="align-self-center text-right text-muted">
                            <samp class="d-block text-nowrap">@programmingTask.Difficulty% <i class="fas fa-award"></i></samp>
                            <samp class="d-block text-nowrap">N/A <i class="fas fa-poll"></i></samp>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    @(await Component.InvokeAsync<PaginationViewComponent>(Model.Pagination))
    
}
else
{
    <div class="card shadow-sm no-selection-allowed">
        <div class="card-body">
            <h5 class="m-0"><i class="fas fa-heart-broken"></i> @Localizer["За вашим пошуковим запитом нічого не знайдено!"]</h5>
            <p class="mt-2 mb-2">
                @Localizer["Дуже шкода, але за вказаними параметрами пошуку нам не вдалося знайти жодного завдання."]
            </p>
            <a class="btn btn-light rounded-lg" asp-action="List"><i class="fas fa-archive"></i> @Localizer["Перейти до Архіву завдань"]</a>
        </div>
    </div>
}